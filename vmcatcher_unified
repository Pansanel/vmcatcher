import sys
import logging
import optparse
import os
version = '0.0.1'

def endorser(args):
    print 'here' , args

def subscribe(args):
    log = logging.getLogger("main")
    """Runs program and handles command line options"""
    p = optparse.OptionParser(prog = os.path.basename(sys.argv[0]) + " subscribe",
        version = "%prog " + version)
    p.add_option('-l', '--list', action ='store_true',help='list subscriptions')
    p.add_option('-d', '--database', action ='store', help='Database Initiation string')
    p.add_option('-s', '--subscribe', action ='append',help='Subscribe to imagelist available at URI', metavar='INPUTURL')
    p.add_option('-e', '--auto-endorse', action ='store_true',help='Add endorser in your subscribe to imagelist action.')
    p.add_option('-c', '--cert-dir', action ='store',help='Certificate directory.', metavar='INPUTDIR')
    p.add_option('-U', '--update', action ='store_true',help='update image metadata')
    p.add_option('-u', '--uuid', action ='append',help='Select subscription', metavar='UUID')
    p.add_option('-r', '--uri', action ='append',help='Select subscription', metavar='URL')
    p.add_option('-f', '--format', action ='store',help='Sets the output format')
    p.add_option('-D', '--delete', action ='store_true',help='Delete subscription')
    p.add_option('-i', '--info', action ='store_true',help='Information on subscription')
    p.add_option('-o', '--output', action ='append',help='Export File.', metavar='OUTPUTFILE')
    p.add_option('-L', '--logfile', action ='store',help='Logfile configuration file.', metavar='LOGFILE')
    p.add_option('-x', '--execute', action ='store',help='Event application to launch.', metavar='EVENT')
    p.add_option('--verbose', action ='count',help='Change global log level, increasing log output.', metavar='LOGFILE')
    p.add_option('--quiet', action ='count',help='Change global log level, decreasing log output.', metavar='LOGFILE')
    p.add_option('--log-config', action ='store',help='Logfile configuration file, (overrides command line).', metavar='LOGFILE')
    p.add_option('--log-sql-info', action ='store_true',help='Echo all SQL commands.', metavar='LOGFILE')
    
    options, arguments = p.parse_args(args)
    print options

def main():
    LoggingLevel= logging.WARNING
    modules = { 'endorser' : endorser,
        'subscribe' : subscribe}
    print sys.argv
    if len(sys.argv) < 2 :
        logging.basicConfig(level=LoggingLevel)
        log = logging.getLogger("main")
        log.error("Not enough arguments.")
        sys.exit(1)
    if sys.argv[1] in modules.keys():
        modules[sys.argv[1]](sys.argv[1:])
    else:
        logging.basicConfig(level=LoggingLevel)
        log = logging.getLogger("main")
        log.error("Invalid Method.")
        output =  modules.keys()
            
        sys.exit(1)
    
if __name__ == "__main__":
    logging.basicConfig(level=logging.WARNING)
    main()
