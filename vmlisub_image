#!/usr/bin/env python
import sys
if sys.version_info < (2, 4):
    print "Your python interpreter is too old. Please consider upgrading."
    sys.exit(1)

if sys.version_info < (2, 5):
    import site
    import os.path
    from distutils.sysconfig import get_python_lib
    found = False
    module_dir = get_python_lib()
    for name in os.listdir(module_dir):
        lowername = name.lower()
        if lowername[0:10] == 'sqlalchemy' and 'egg' in lowername:
            sqlalchemy_dir = os.path.join(module_dir, name) 
            if os.path.isdir(sqlalchemy_dir):
                site.addsitedir(sqlalchemy_dir) 
                found = True
                break
    if not found:
        print "Could not find SQLAlchemy installed."
        sys.exit(1)

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import hepixvmlis.databaseDefinition as model

import logging
import optparse
import smimeX509validation.loadcanamespace as loadcanamespace
from hepixvmlis.__version__ import version
import hepixvmlis
import urllib2
import urllib
import hashlib
import datetime
from hepixvmitrust.vmitrustlib import VMimageListDecoder as VMimageListDecoder
from hepixvmitrust.vmitrustlib import time_format_definition as time_format_definition
from M2Crypto import SMIME, X509, BIO
try:
    import simplejson as json
except:
    import json

class db_actions:
    
    def __init__(self,session):
        self.session = session
        self.log = logging.getLogger("vmlisub_sub.db_actions")
    

    def image_lister(self):
        outputlist = []

        subauthq = self.session.query(model.Image,model.Subscription).\
            filter(model.Subscription.imagelist_latest == model.Imagelist.id).\
            filter(model.Subscription.authorised == True).\
            filter(model.Image.imagelist == model.Imagelist.id)
            
        for q_result in subauthq:
            image = q_result[0]
            subscription = q_result[1]
            
            outputlist.append("%s\t%s\t%s" % (image.identifier,subscription.uuid,image.sha512))
        
        seperator = '\n'
        return seperator.join(outputlist)
    
    def image_by_sha512_writefile_imagelist(self,treess,sha512,path):
        query_image = self.session.query(model.Image).\
            filter(model.Image.imagelist == model.Imagelist.id).\
            filter(model.Image.sha512 == str(sha512))
        if query_image.count() == 0:
            self.log.warning('Message not found')
            return False
        fp = open(path,'w')
        for image in query_image:
            fp.write(image.data)
        fp.close()
        return True
        
        
    def image_by_sha512_writefile_json(self,treess,sha512,path):
        query_image = self.session.query(model.Image,model.Imagelist).\
            filter(model.Image.imagelist == model.Imagelist.id).\
            filter(model.Image.sha512 == sha512)
        if query_image.count() == 0:
            self.log.warning('Message not found')
            return False
        fp = open(path,'w')
        for touple_set in query_image:
            image = touple_set[0]
            image_list = touple_set[1]
            buf = BIO.MemoryBuffer(str(image_list.data))
            sk = X509.X509_Stack()
            p7, data = SMIME.smime_load_pkcs7_bio(buf)
            data_str = data.read()
            fp.write(data_str)
        fp.close()
    def image_by_sha512_display_info(self,ancore,sha512):
        output = []
        query_image = self.session.query(model.Image,model.Imagelist).\
            filter(model.Image.imagelist == model.Imagelist.id).\
            filter(model.Image.sha512 == str(sha512))
        if query_image.count() == 0:
            self.log.warning('Message not found')
            return False
        for query_row in query_image:
            image = query_row[0]
            imagelist = query_row[1]
            
            print ('dc:identifier=%s' % (image.identifier))
            print ('dc:description=%s' % (image.description))
            print ('hv:hypervisor=%s' % (image.hypervisor))
            print ('sl:checksum:sha512=%s' % (image.sha512))
            print ('hv:uri=%s' % (image.uri))
            print ('sl:os=%s' % (image.os))
            print ('sl:osversion=%s' % (image.osversion ))
            print ('sl:arch=%s' % (image.arch))
            print ('hv:version=%s' % (image.version))
            print ('hv:size=%s' % (image.size))
            print ('dc:title=%s' % (image.title))
            print ('sl:comments=%s' % (image.comments))
            print ('dc:date:imported=%s' % (imagelist.imported.strftime(time_format_definition)))
            print ('dc:date:created=%s' % (imagelist.created.strftime(time_format_definition)))
            print ('dc:date:expires=%s' % (imagelist.expires.strftime(time_format_definition)))
            #validated_data = ancore.validate_text(str(image.data))
            #data = validated_data['data']
            #dn = validated_data['signer_dn']
            #ca = validated_data['issuer_dn']
        return True
class queryby_base:
    """"Base class for querying subscriptions"""
    def __init__(self,session):
        self.session = session
    def subscription_by_id(self,private_id):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.id==private_id)
        return subscriptionlist
    def subscription_by_uri(self,url):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.url==url)
        return subscriptionlist
    def subscription_by_uuid(self,uuid):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.uuid==uuid)
        return subscriptionlist
    def imagelist_by_id(self,private_id):
        subscriptionlist = self.session.query(model.Imagelist).\
                filter(model.Imagelist.id==private_id)
        return subscriptionlist
    
        # Now the virtual class
    def subscription_get(self,by_id):
        return self.subscription_by_id(by_id)
    
    def imagelistImage_by_imageUuid(self,uuid):
        imagelistImage = self.session.query(model.Imagelist,model.Image).\
                filter(model.Imagelist.id==model.Image.imagelist).\
                filter(model.Image.identifier == uuid)
        return imagelistImage
    def imagelistImage_by_imageSha512(self,sha512):
        imagelistImage = self.session.query(model.Imagelist,model.Image).\
                filter(model.Imagelist.id==model.Image.imagelist).\
                filter(model.Image.sha512 == sha512)
        return imagelistImage
    
    
class queryby_sha512(queryby_base):
    def imagelistImage_get(self,sha512):
        return self.imagelistImage_by_imageSha512(sha512)

class queryby_uuid(queryby_base):
    def imagelistImage_get(self,uuid):
        return self.imagelistImage_by_imageUuid(uuid)

class output_driver_base:
    def __init__(self,file_pointer,session,anchor):
        self.session = session
        self.log = logging.getLogger("db_actions")
        self.file_pointer = file_pointer
        self.anchor = anchor
    def display_subscription_imagelist(self,subscription,imagelist):
        status = None
        
        self.display_subscription(subscription)
        self.display_imagelist(imagelist)
        
        return True
    def display_subscription(self,subscription):
        pass
    def display_imagelist(self,imagelist):
        pass
    def subscriptions_lister(self):
        pass

class output_driver_smime(output_driver_base):
    def display_subscription(self,subscription):
        pass
    def display_imagelist(self,imagelist):
        self.file_pointer.write (imagelist.data)
    def display_imagelistImage(self,imagelist,image):
        self.display_imagelist(imagelist)
    
class output_driver_message(output_driver_base):
    def display_subscription(self,subscription):
        pass
    def display_imagelist(self,imagelist):
        
        validated_data = self.anchor.validate_text(str(imagelist.data))
        self.file_pointer.write (validated_data['data'])
    def display_imagelistImage(self,imagelist,image):
        self.display_imagelist(imagelist)

class output_driver_lines(output_driver_base):
    def display_subscription(self,image):
        self.file_pointer.write ('image.dc:identifier=%s\n' % (image.identifier))
        self.file_pointer.write ('image.dc:description=%s\n' % (image.description))
        self.file_pointer.write ('image.hv:uri=%s\n' % (image.uri))
        return True
    def display_imagelist(self,imagelist):
        
        validated_data = self.anchor.validate_text(str(imagelist.data))
        self.file_pointer.write (validated_data['data'])
    def display_imagelistImage(self,imagelist,image):
        self.file_pointer.write ('imagelist.dc:identifier=%s\n' % (imagelist.identifier))
        self.file_pointer.write ('imagelist.dc:date:imported=%s\n' % (imagelist.imported.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.dc:date:created=%s\n' % (imagelist.created.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.dc:date:expires=%s\n' % (imagelist.expires.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.authorised=%s\n' % (imagelist.authorised))
        self.file_pointer.write ('image.dc:identifier=%s\n' % (image.identifier))
        self.file_pointer.write ('image.sl:checksum:sha512=%s\n' % (image.sha512))
        
    def subscriptions_lister(self):
        
        subauthq = self.session.query(model.Subscription).all()
        for item in subauthq:
            self.file_pointer.write ("%s\t%s\t%s\n" % (item.uuid,item.authorised,item.url))

class db_controler:
    def __init__(self,dboptions):
        self.log = logging.getLogger("vmlisub_image.controler")
        self.engine = create_engine(dboptions, echo=False)
        self.SessionFactory = sessionmaker(bind=self.engine)
        self.anchor = None
    def setup_trust_anchor(self,directory):
        self.anchor = loadcanamespace.TrustAnchor()
        self.anchor.update_ca_list(directory)
    def setup_selector_factory(self,factory):
        self.factory_selector = factory
    def setup_view_factory(self,factory):
        self.factory_view = factory
    def images_info(self,images_selected,outputfiles):
        
        pairs, extra_selectors ,extra_paths = pairsNnot(images_selected,outputfiles)
        
        for item in extra_selectors:
            pairs.append([item,None])
            
        errorhappened = False
        Session = self.SessionFactory()
        selector = self.factory_selector(Session)
        for pair in pairs:
            selector_filter = pair[0]
            output_file_name = pair[1]        
            output_fileptr = sys.stdout
            if output_file_name != None:
                output_fileptr = open(output_file_name,'w+')
                output_fileptr.flush()
            
            query_subscription = selector.imagelistImage_get(selector_filter)
            view = self.factory_view(output_fileptr,Session,self.anchor)
            
            for item in query_subscription:
                imagelist = item[0]
                image = item[1]
                view.display_imagelistImage(imagelist,image)
                
                    
            if output_file_name != None:
                output_fileptr.close()
    def image_subscription_delete(self,images_selected):
        Session = self.SessionFactory()
        db = db_actions(Session)
        for selection in images_selected:
            self.log.error("Function not implemented.")
            #db.subscriptions_delete_by_image(selection)
        Session.commit()
        sys.exit(0)
    def image_list(self):
        Session = self.SessionFactory()
        db = db_actions(Session)
        print db.image_lister()
# User interface

def pairsNnot(list_a,list_b):
    len_generate_list = len(list_a)
    len_image_list = len(list_b)
    ocupies_generate_list = set(range(len_generate_list))
    ocupies_image_list = set(range(len_image_list))
    ocupies_pairs = ocupies_image_list.intersection(ocupies_generate_list)
    diff_a = ocupies_generate_list.difference(ocupies_image_list)
    diff_b = ocupies_image_list.difference(ocupies_generate_list)
    arepairs = []
    for i in ocupies_pairs:
        arepairs.append([list_a[i],list_b[i]])
    notpairs_a = []
    for i in diff_a:
        notpairs_a.append(list_a[i])
    notpairs_b = []
    for i in diff_b:
        notpairs_b.append(list_b[i])
    
    return arepairs,notpairs_a,notpairs_b


def main():
    log = logging.getLogger("vmlisub_sub.main")
    """Runs program and handles command line options"""
    p = optparse.OptionParser(version = "%prog " + version)
    p.add_option('-l', '--list', action ='store_true',help='list subscriptions')
    p.add_option('-d', '--database', action ='store', help='Database Initiation string',
        default='sqlite:///tutorial.db')
    p.add_option('-c', '--cert-dir', action ='store',help='Certificate directory.', metavar='INPUTDIR',
        default='/etc/grid-security/certificates/')
    p.add_option('-s', '--sha512', action ='append',help='Select images by sha512.', metavar='SHA512')
    p.add_option('-u', '--uuid', action ='append',help='Select images by uuid.', metavar='UUID')    
    p.add_option('-D', '--delete', action ='store_true',help='Delete subscription', metavar='OUTPUTFILE')
    p.add_option('-i', '--info', action ='store_true',help='Info on selected images')
    p.add_option('-f', '--format', action ='store',help='Sets the output format')
    p.add_option('-o', '--output', action ='append',help='Export File.', metavar='OUTPUTFILE')
    outputformats = set(['SMIME','message','lines'])
    output_format_selected = set([])
    options, arguments = p.parse_args()
    anchor_needed = False
    format_needed = False
    anchor =  loadcanamespace.TrustAnchor()
    actions = set([])
    images_selected = []
    messages_path = []
    subscription_url_list = []
    outputfiles = []
    input_format_selected = set([])
    actionsrequiring_selections = set(['output','delete','info'])
    inputformats = set(['uuid','sha512'])
    input_format_selected = set([])
    if options.list:
        actions.add('list')
    if options.sha512:
        images_selected = options.sha512
        input_format_selected.add('sha512')
    if options.uuid:
        images_selected = options.uuid
        input_format_selected.add('uuid')
    if options.info:
        actions.add('info')
        anchor_needed = True
    if options.delete:
        actions.add('delete')
    if options.output:
        format_needed = True
        outputfiles = options.output
    
    # 1 So we have some command line validation
    
    if len(actions) == 0:
        log.error("No actions selected")
        sys.exit(1)
    if len(actions) > 1:
        log.error("More than one action selected.")
        sys.exit(1)
    if format_needed and len(output_format_selected) == 0:
        log.error("No output format selected")
        sys.exit(1)
    
    if options.format:
        if options.format in outputformats:
            output_format_selected.add(options.format)
            anchor_needed = True
        else:
            log.error("Invalid format '%s' allowed formats are '%s'" % (options.format,outputformats))
            sys.exit(1)
    # 1 So we have some actions to process
    
    # 1.1 Initate DB
    database = db_controler(options.database)
    # 2 Initate CA's to manage files
    if anchor_needed:
        if anchor_needed:
            database.setup_trust_anchor(options.cert_dir)
    # Handle conflicting identifiers
    
    selectors_types = inputformats.intersection(input_format_selected)
    selectors_types_len = len(selectors_types)
    if selectors_types_len > 1:
        log.error('Conflicting selectors.')
        sys.exit(1)
    
    selector_str = 'uuid'
    
    if selectors_types_len == 1:
        selector_str = selectors_types.pop()
    
    mapper = {'uuid' : queryby_uuid,
            'sha512' : queryby_sha512,
        }
    database.setup_selector_factory(mapper[selector_str])
    # Handle the output_view
    
    outputformats_selections = outputformats.intersection(output_format_selected)
    outputformats_selections_len = len(outputformats_selections)
    if outputformats_selections_len > 1:
        log.error('Conflicting output formats.')
        sys.exit(1)
    selector_str = 'lines'
    if outputformats_selections_len == 1:
        selector_str = outputformats_selections.pop()
    mapper = {'lines' : output_driver_lines,
        'SMIME' : output_driver_smime,
        'message' : output_driver_message,    
    }
    database.setup_view_factory(mapper[selector_str])
    # Handle actions
    if 'subscribe' in actions:
        Session = SessionFactory()
        db = db_actions(Session)
        for uri in subscription_url_list:
            db.subscribe_file(anchor,uri)         
    if 'list' in actions:
        database.image_list()
    if 'update' in actions:
        Session = SessionFactory()
        db = db_actions(Session)
        db.subscriptions_update(anchor)
    
    if 'delete' in actions:
        database.image_subscription_delete(images_selected)
    if 'dump' in actions:
        if not 'select' in actions:
            log.error('No subscriptions selected.')
        if 'json' in actions:
            pairs, extra_uuid ,extra_paths = pairsNnot(images_selected,messages_path)
            if len(extra_paths) > 0:
                log.warning('Extra paths will be ignored.')
                for path in extra_paths:
                    log.info('ignoring path %s' % (path))
            if len(extra_uuid) > 0:
                log.warning('sha512 ignored.')
                for path in extra_uuid:
                    log.info('ignoring sha512 %s' % (path))
            Session = SessionFactory()
            db = db_actions(Session)
            for item in pairs:
                db.image_by_sha512_writefile_json(anchor,item[0],item[1])
        if 'message' in actions:
            pairs, extra_uuid ,extra_paths = pairsNnot(images_selected,messages_path)
            if len(extra_paths) > 0:
                log.warning('Extra paths will be ignored.')
                for path in extra_paths:
                    log.info('ignoring path %s' % (path))
            if len(extra_uuid) > 0:
                log.warning('sha512 ignored.')
                for path in extra_uuid:
                    log.info('Ignoring sha512 %s' % (path))
            
            Session = SessionFactory()
            db = db_actions(Session)
            for item in pairs:
                db.image_by_sha512_writefile_imagelist(anchor,item[0],item[1])
    if 'info' in actions:
        database.images_info(images_selected,outputfiles)
        
        
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
