#!/usr/bin/env python
import sys
if sys.version_info < (2, 4):
    print "Your python interpreter is too old. Please consider upgrading."
    sys.exit(1)

if sys.version_info < (2, 5):
    import site
    import os.path
    from distutils.sysconfig import get_python_lib
    found = False
    module_dir = get_python_lib()
    for name in os.listdir(module_dir):
        lowername = name.lower()
        if lowername[0:10] == 'sqlalchemy' and 'egg' in lowername:
            sqlalchemy_dir = os.path.join(module_dir, name)
            if os.path.isdir(sqlalchemy_dir):
                site.addsitedir(sqlalchemy_dir)
                found = True
                break
    if not found:
        print "Could not find SQLAlchemy installed."
        sys.exit(1)
from sqlalchemy import create_engine
import hepixvmlis.databaseDefinition as model
import os
import logging
import optparse
import smimeX509validation.loadcanamespace as loadcanamespace
import sys
from hepixvmlis.__version__ import version

from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import IntegrityError, DatabaseError, ProgrammingError
import hepixvmlis
import urllib2
import urllib
import hashlib
import datetime
from hepixvmitrust.vmitrustlib import VMimageListDecoder as VMimageListDecoder
from hepixvmitrust.vmitrustlib import time_format_definition as time_format_definition
try:
    import json
except:
    import simplejson

# User interface

class queryby_base:
    """"Base class for querying subscriptions"""
    def __init__(self,session):
        self.session = session
    def subscription_by_id(self,private_id):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.id==private_id)
        return subscriptionlist
    def subscription_by_uri(self,url):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.url==url)
        return subscriptionlist
    def subscription_by_uuid(self,uuid):
        subscriptionlist = self.session.query(model.Subscription).\
                filter(model.Subscription.uuid==uuid)
        return subscriptionlist
    def imagelist_by_id(self,private_id):
        subscriptionlist = self.session.query(model.Imagelist).\
                filter(model.Imagelist.id==private_id)
        return subscriptionlist

        # Now the virtual class
    def subscription_get(self,by_id):
        return self.subscription_by_id(private_id)
    def endorser_all(self):
        return self.session.query(model.Endorser).all()
    def endorser_by_uuid(self,uuid):
        endorser_list = self.session.query(model.Endorser).\
                filter(model.Endorser.identifier==uuid)
        return endorser_list
    def princible_by_endorserId(self,identifier):
        princible_list = self.session.query(model.EndorserPrincible).\
                filter(model.EndorserPrincible.endorser == identifier)
        return princible_list
    def subscriptionAuth_by_endorserId(self,identifier):
        subauth_list = self.session.query(model.SubscriptionAuth).\
                filter(model.SubscriptionAuth.endorser == identifier)
        return subauth_list
class queryby_uri(queryby_base):
    def subscription_get(self,url):
        return self.subscription_by_uri(url)

class queryby_uuid(queryby_base):
    def subscription_get(self,uuid):
        return self.subscription_by_uuid(uuid)


class output_driver_base:
    def __init__(self,file_pointer,session,anchor):
        self.session = session
        self.log = logging.getLogger("db_actions")
        self.file_pointer = file_pointer
        self.anchor = anchor
    def display_subscription_imagelist(self,subscription,imagelist):
        status = None

        self.display_subscription(subscription)
        self.display_imagelist(imagelist)

        return True
    def display_subscription(self,subscription):
        pass
    def display_imagelist(self,imagelist):
        pass
    def subscriptions_lister(self):
        pass

class output_driver_lines(output_driver_base):
    def display_subscription(self,subscription):
        self.file_pointer.write ('subscription.dc:identifier=%s\n' % (subscription.identifier))
        self.file_pointer.write ('subscription.dc:description=%s\n' % (subscription.description))
        self.file_pointer.write ('subscription.sl:authorised=%s\n' % (subscription.authorised))
        self.file_pointer.write ('subscription.hv:uri=%s\n' % (subscription.uri))
        if subscription.updated:
            self.file_pointer.write ('subscription.dc:date:updated=%s\n' % (subscription.updated.strftime(time_format_definition)))
        else:
            self.file_pointer.write ('subscription.dc:date:updated=%s\n'% (False))
        return True
    def display_imagelist(self,imagelist):

        validated_data = self.anchor.validate_text(str(imagelist.data))
        self.file_pointer.write (validated_data['data'])
    def display_imagelist(self,imagelist):
        self.file_pointer.write ('imagelist.dc:date:imported=%s\n' % (imagelist.imported.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.dc:date:created=%s\n' % (imagelist.created.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.dc:date:expires=%s\n' % (imagelist.expires.strftime(time_format_definition)))
        self.file_pointer.write ('imagelist.authorised=%s\n' % (imagelist.authorised))
    def endorser_lister(self,allendorsers):
        for endorser in allendorsers:
            EndId = str(endorser.identifier)
            subauthq = self.session.query(model.Endorser,model.EndorserPrincible).\
                filter(model.Endorser.id==model.EndorserPrincible.endorser).\
                filter(model.Endorser.identifier==EndId)
            for item in subauthq:
                endorser = item[0]
                princible = item[1]
                self.file_pointer.write ("%s\t'%s'\t'%s'\n" % (endorser.identifier,princible.hv_dn,princible.hv_ca))


    def display_endorser(self,endorser):
        self.file_pointer.write ("endorser.dc:identifier=%s\n" % (endorser.identifier))
        princible_query = self.query.princible_by_endorserId(endorser.id)
        if princible_query.count() == 0:
            self.log.warning("endorser '%s' has no princibles" % (selector_filter))
            return False
        for princible in princible_query:
            self.file_pointer.write("endorser.hv:dn=%s\n" % (princible.hv_dn))
            self.file_pointer.write("endorser.hv:ca=%s\n" % (princible.hv_ca))
        subauth_query = self.query.subscriptionAuth_by_endorserId(endorser.id)
        for subauth in subauth_query:
            #self.file_pointer.write("subauth.authorised=%s\n" % (subauth.authorised))
            subscription_query = self.query.subscription_by_id(subauth.subscription)
            for subscription in subscription_query:
                self.display_subscription(subscription)

class db_controler:
    def __init__(self,dboptions):
        self.log = logging.getLogger("db_controler")
        self.engine = create_engine(dboptions, echo=False)
        model.init(self.engine)
        self.SessionFactory = sessionmaker(bind=self.engine)
        self.anchor = None
        self.factory_selector = None
        

    def setup_trust_anchor(self,directory):
        self.anchor = loadcanamespace.ViewTrustAnchor()
        self.anchor.update_ca_list(directory)
    def setup_selector_factory(self,factory):
        self.factory_selector = factory
    
    # Utility functions
    def check_factories(self):
        if self.factory_selector == None:
            self.log.warning("selector not available.")
            return False
        return True
    def endosers_list(self):
        Session = self.SessionFactory()
        selector = self.factory_selector(Session)
        view = output_driver_lines(sys.stdout,Session,self.anchor)

        view.endorser_lister(selector.endorser_all())
        return True

    def link(self,endorsers_selected,subscriptions_selected):
        if not self.check_factories():
            return False
        pairs, extra_selectors ,extra_paths = pairsNnot(endorsers_selected,subscriptions_selected)
        Session = self.SessionFactory()
        for pair in pairs:
            endorser = pair[0]
            subscription = pair[1]
            subauth_list = Session.query(model.Endorser,model.Subscription,model.SubscriptionAuth).\
                filter(model.Endorser.identifier == endorser).\
                filter(model.Subscription.identifier == subscription).\
                filter(model.SubscriptionAuth.endorser == model.Endorser.id).\
                filter(model.SubscriptionAuth.subscription == model.Subscription.id)
            if subauth_list.count() == 0:
                endorser_list = Session.query(model.Endorser).\
                    filter(model.Endorser.identifier == endorser)
                if endorser_list.count() == 0:
                    self.log.warning("endorser not available.")
                    continue
                sub_list = Session.query(model.Subscription).\
                    filter(model.Subscription.identifier == subscription)
                if sub_list.count() == 0:
                    self.log.warning("subscription not available.")
                    continue
                db_endorser = endorser_list.one()
                db_sub = sub_list.one()
                newsubauth = model.SubscriptionAuth(db_sub.id,db_endorser.id,True)
                Session.add(newsubauth)
                Session.commit()
            else:
                self.log.warning("endorser and subscription already linked.")
                
                
    def unlink(self,endorsers_selected,subscriptions_selected):
        if not self.check_factories():
            return False
        Session = self.SessionFactory()
        pairs, extra_selectors ,extra_paths = pairsNnot(endorsers_selected,subscriptions_selected)
        for pair in pairs:
            endorser = pair[0]
            subscription = pair[1]
            subauth_list = Session.query(model.Endorser,model.Subscription,model.SubscriptionAuth).\
                filter(model.Endorser.identifier == endorser).\
                filter(model.Subscription.identifier == subscription).\
                filter(model.SubscriptionAuth.endorser == model.Endorser.id).\
                filter(model.SubscriptionAuth.subscription == model.Subscription.id)
            if subauth_list.count() == 0:
                self.log.warning("endorser and subscription are not linked.")
            else:
                for query_row in subauth_list:
                    db_endorser = query_row[0]
                    db_sub = query_row[1]
                    db_subAuthEnd = query_row[2]
                    Session.delete(db_subAuthEnd)
                    Session.commit()

    def endorsers_info(self,selected):
        if not self.check_factories():
            return False
        errorhappened = False
        Session = self.SessionFactory()
        selector = self.factory_selector(Session)
        for selector_filter in selected:
            output_fileptr = sys.stdout
            query_endorser = selector.endorser_by_uuid(selector_filter)
            if query_endorser.count() == 0:
                self.log.error("endorser '%s' not found" % (selector_filter))
                continue
            view = output_driver_lines(output_fileptr,Session,self.anchor)
            view.query = selector
            for endorser in query_endorser:
                view.display_endorser(endorser)
                princible_query = selector.princible_by_endorserId(endorser.id)
                if princible_query.count() == 0:
                    self.log.warning("endorser '%s' has no princibles" % (selector_filter))
                else:
                    pass
        return True
    
    def endorser_create(self,endorser,subjects,issuers):
        # Check input parameters.
        if not self.check_factories():
            return False
        pairs, extra_subs ,extra_issuers = pairsNnot(subjects,issuers)
        if len(extra_subs) > 0:
            if len(issuers) > 1:
                self.log.warning("Unsure how to add subjects credentials without issuer credentials.")
                return False
            else:
                if len (issuers) > 0:
                    thisissuer = issuers[0]
                    for this_sub in extra_subs:
                        pairs.append([this_sub,thisissuer])
                else:
                    self.log.warning("Cant add subjects credentials without issuer credentials.")
                    return False
        if len (extra_issuers) > 0:
            self.log.warning("Cant add issuer credentials, without a subject.")
            return False
        if len(pairs) == 0:
            return True
        # Now we process requests
        error = False
        deleteOnError = False
        Session = self.SessionFactory()
        endorserQuery = Session.query(model.Endorser).\
                filter(model.Endorser.identifier==endorser)
        endorserObj = None
        if endorserQuery.count() == 0:
            endorserObj = model.Endorser({'dc:identifier' : str(endorser)})
            Session.add(endorserObj)
            Session.commit()
            deleteOnError = True
            endorserQuery = Session.query(model.Endorser).\
                filter(model.Endorser.identifier==endorser)
            
        endorserObj = endorserQuery.one()
        endorserObjId = int(endorserObj.id)
        for pair in pairs:
            dn = pair[0]
            issuer = pair[1]
            cred = model.EndorserPrincible(endorserObjId,{u'hv:dn' : dn, u'hv:ca' : issuer})
            Session.add(cred)
            try:
                Session.commit()
            except IntegrityError,E:
                self.log.error("Database integrity error while adding '%s' credentials to  '%s'." % (dn,endorser))
                self.log.debug(E.params)
                Session.rollback()
                error = True
                break
        if error and deleteOnError:
            endorserQuery = Session.query(model.Endorser).\
                filter(model.Endorser.identifier==endorser)
            if endorserQuery.count() > 0:
                EndorserToDel = endorserQuery.one()
                Session.delete(EndorserToDel)
                Session.commit()
                return False
        return True
    def endorser_delete(self,endorsers):
        # Check input parameters.
        if not self.check_factories():
            return False
        Session = self.SessionFactory()
        for endorser in endorsers:
            endorserQuery = Session.query(model.Endorser).\
                filter(model.Endorser.identifier==endorser)
            if endorserQuery.count() == 0:
                self.log.warning("Failed to find endorser '%s'." % (endorser))
                continue
            for obj in endorserQuery:
                Session.delete(obj)
                self.log.info("Deleting endorser '%s'." % (endorser))
            Session.commit()
                
                
                
            
            

def pairsNnot(list_a,list_b):
    len_generate_list = len(list_a)
    len_image_list = len(list_b)
    ocupies_generate_list = set(range(len_generate_list))
    ocupies_image_list = set(range(len_image_list))
    ocupies_pairs = ocupies_image_list.intersection(ocupies_generate_list)
    diff_a = ocupies_generate_list.difference(ocupies_image_list)
    diff_b = ocupies_image_list.difference(ocupies_generate_list)
    arepairs = []
    for i in ocupies_pairs:
        arepairs.append([list_a[i],list_b[i]])
    notpairs_a = []
    for i in diff_a:
        notpairs_a.append(list_a[i])
    notpairs_b = []
    for i in diff_b:
        notpairs_b.append(list_b[i])

    return arepairs,notpairs_a,notpairs_b



def main():
    """Runs program and handles command line options"""
    p = optparse.OptionParser(version = "%prog " + version)
    p.add_option('-l', '--list', action ='store_true',help='List endorsers.')
    p.add_option('-d', '--database', action ='store', help='Database Initiation string.')
    p.add_option('-s', '--subscription_uuid', action ='append',help='Select subscription by uuid.', metavar='UUID')
    p.add_option('-e', '--endorser_uuid', action ='append',help='Select endorser by uuid.', metavar='UUID')
    p.add_option('-C', '--create', action ='store_true',help='Create an endorser.')
    p.add_option('-S', '--subject',action ='append',help='Endorsers certificate subject.', metavar='SUBJECT')
    p.add_option('-I', '--issuer',action ='append',help='Endorsers certificate issuer.', metavar='SUBJECT') 
    p.add_option('-D', '--delete', action ='store_true',help='Delete an endorser.')
    p.add_option('-k', '--link', action ='store_true',help='Add endorser to subscription.')
    p.add_option('-u', '--unlink', action ='store_true',help='Remove endorser from Subscription.')
    p.add_option('-i', '--info', action ='store_true',help='Information on endoser.')
    p.add_option('-L', '--logfile', action ='store',help='Logfile configuration file.', metavar='LOGFILE')

    options, arguments = p.parse_args()
    anchor_needed = False

    actions = set([])
    endorsers_selected = []
    subscriptions_selected = []
    subjects_selected = []
    issuers_selected = []
    actionsrequiring_endorser = set(['create','delete','link','unlink','info'])
    actionsrequiring_subscription = set(['link','unlink'])
    actionsrequiring_subject = set(['create'])
    actionsrequiring_issuer = set(['create'])
    databaseConnectionString = None
    # Set up log file
    if options.logfile:
        if os.path.isfile(str(options.logfile)):
            logging.config.fileConfig(options.logfile)
        else:
            logging.basicConfig(level=logging.INFO)
            log = logging.getLogger("main")
            log.error("Logfile configuration file '%s' was not found." % (options.logfile))
            sys.exit(1)
    else:
        logging.basicConfig(level=logging.INFO)
    log = logging.getLogger("main")
    # Now logging is set up process other options
    if options.list:
        actions.add('list')


    if options.endorser_uuid:
        endorsers_selected = options.endorser_uuid
    if options.subscription_uuid:
        subscriptions_selected = options.subscription_uuid
    if options.create:
        actions.add('create')
    if options.delete:
        actions.add('delete')
    if options.link:
        actions.add('link')
    if options.unlink:
        actions.add('unlink')
    if options.info:
        actions.add('info')

    if options.database:
        databaseConnectionString = options.database
    if options.subject:
        subjects_selected = options.subject
    if options.issuer:
        issuers_selected = options.issuer
        
    # 1 So we have some command line validation
    if databaseConnectionString == None:
        databaseConnectionString = 'sqlite:///vmilsubscriber.db'
        log.info("Defaulting DB connection to '%s'" % (databaseConnectionString))
    if len(actions) == 0:
        log.error("No actions selected")
        sys.exit(1)
    if len(actions) > 1:
        log.error("More than one action selected.")
        sys.exit(1)
    # 1.1 Initate DB
    database = db_controler(databaseConnectionString)


    # Handle actions selections beign required.

    # Check endorser selected
    actions_req_endorser = actionsrequiring_endorser.intersection(actions)
    actions_req_endorser_len = len(actions_req_endorser)
    if actions_req_endorser_len == 1:
        if len(endorsers_selected) == 0:
            log.error('No endorsers selected.')
            sys.exit(1)

    # Check subscription selected
    actions_req_subscription = actionsrequiring_subscription.intersection(actions)
    actions_req_subscription_len = len(actions_req_subscription)
    if actions_req_subscription_len == 1:
        if len(subscriptions_selected) == 0:
            log.error('No subscriptions selected.')
            sys.exit(1)

    
    # Check subject selected
    actions_req_subject = actionsrequiring_subject.intersection(actions)
    actions_req_subject_len = len(actions_req_subject)
    if actions_req_subject_len == 1:
        if len(subjects_selected) == 0:
            log.error('No subjects selected.')
            sys.exit(1) 
    
    # Check issuer selected
    actions_req_issuer = actionsrequiring_issuer.intersection(actions)
    actions_req_issuer_len = len(actions_req_issuer)
    if actions_req_issuer_len == 1:
        if len(issuers_selected) == 0:
            log.error('No issuers selected.')
            sys.exit(1)
    # Handle conflicting identifiers


    database.setup_selector_factory(queryby_uuid)
    if 'create' in actions:
        if len(endorsers_selected) > 1:
            log.error("More than one endorser cannot be created at a time.")
            sys.exit(1)
        if not database.endorser_create(endorsers_selected[0],subjects_selected,issuers_selected):
            sys.exit(12)
    if 'list' in actions:
        database.endosers_list()
    if 'link' in actions:
        database.link(endorsers_selected,subscriptions_selected)
    if 'unlink' in actions:
        database.unlink(endorsers_selected,subscriptions_selected)
    if 'delete' in actions:
        database.endorser_delete(endorsers_selected)
    

    if 'info' in actions:
        database.endorsers_info(endorsers_selected)
    
if __name__ == "__main__":
    main()
